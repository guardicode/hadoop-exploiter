from ipaddress import IPv4Address
from pathlib import PurePosixPath, PureWindowsPath
from typing import Union
from unittest.mock import MagicMock

import pytest
from agentpluginapi import (
    IAgentCommandBuilderFactory,
    ILinuxAgentCommandBuilder,
    IWindowsAgentCommandBuilder,
    TargetHost,
)
from monkeytypes import OperatingSystem

from hadoop_exploiter.hadoop_command_builder import build_hadoop_command

EXPECTED_COMMAND = "RCE"


@pytest.fixture
def linux_agent_command_builder() -> ILinuxAgentCommandBuilder:
    mock_command_builder = MagicMock(spec=ILinuxAgentCommandBuilder)
    mock_command_builder.get_command.return_value = EXPECTED_COMMAND
    return mock_command_builder


@pytest.fixture
def windows_agent_command_builder() -> IWindowsAgentCommandBuilder:
    mock_command_builder = MagicMock(spec=IWindowsAgentCommandBuilder)
    mock_command_builder.get_command.return_value = EXPECTED_COMMAND
    return mock_command_builder


@pytest.fixture
def agent_command_builder_factory(
    linux_agent_command_builder: ILinuxAgentCommandBuilder,
    windows_agent_command_builder: IWindowsAgentCommandBuilder,
) -> IAgentCommandBuilderFactory:
    agent_command_builder_factory = MagicMock(spec=IAgentCommandBuilderFactory)
    agent_command_builder_factory.create_linux_agent_command_builder.return_value = (
        linux_agent_command_builder
    )
    agent_command_builder_factory.create_windows_agent_command_builder.return_value = (
        windows_agent_command_builder
    )

    return agent_command_builder_factory


@pytest.fixture
def build_command(agent_command_builder_factory: IAgentCommandBuilderFactory):
    def build(host: TargetHost) -> str:
        destination_path: Union[PureWindowsPath, PurePosixPath] = PureWindowsPath(
            "C:\\Windows\\Temp\\agent.exe"
        )
        if host.operating_system == OperatingSystem.LINUX:
            destination_path = PurePosixPath("/tmp/agent")
        return build_hadoop_command(
            host,
            destination_path,
            "http://download.me",
            agent_command_builder_factory,
        )

    return build


def test_command__linux(
    build_command,
    linux_agent_command_builder: ILinuxAgentCommandBuilder,
    windows_agent_command_builder: IWindowsAgentCommandBuilder,
):
    actual_command = build_command(
        host=TargetHost(ip=IPv4Address("127.0.0.1"), operating_system=OperatingSystem.LINUX)
    )

    windows_agent_command_builder.get_command.assert_not_called()
    linux_agent_command_builder.get_command.assert_called_once()
    assert actual_command == EXPECTED_COMMAND


@pytest.mark.parametrize("os", [OperatingSystem.WINDOWS, None])
def test_command__windows(
    build_command,
    os,
    linux_agent_command_builder: ILinuxAgentCommandBuilder,
    windows_agent_command_builder: IWindowsAgentCommandBuilder,
):
    actual_command = build_command(
        host=TargetHost(ip=IPv4Address("127.0.0.1"), operating_system=os)
    )

    linux_agent_command_builder.get_command.assert_not_called()
    windows_agent_command_builder.get_command.assert_called_once()
    assert actual_command == EXPECTED_COMMAND
